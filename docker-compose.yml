version: '3.8'

services:
  crud:
    build:
      context: ./crud
    container_name: crud
    ports:
      - "5000:5000"
    networks:
      - backend
      - database

  openfoodfacts:
    build:
      context: ./openfoodfacts
    container_name: openfoodfacts
    ports:
      - "5010:5000"
    networks:
      - backend


  business_logic:
    build:
      context: ./business_logic
    container_name: business_logic
    ports:
      - "5005:5000"
    networks:
      - backend

  prometheus:
    image: prom/prometheus:v2.37.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - monitoring
      - backend
      - database
      - auth

  grafana:
    image: grafana/grafana:9.0.0
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - monitoring

  mysql:
    image: mysql:8
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: keycloak
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - auth

  keycloak:
    image: quay.io/keycloak/keycloak:22.0
    container_name: keycloak
    restart: always
    environment:
      KC_DB: mysql
      KC_DB_URL_HOST: mysql
      KC_DB_URL_DATABASE: keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HTTP_RELATIVE_PATH: /auth
      KC_HOSTNAME_STRICT: 'false'
      KC_HTTP_ENABLED: 'true'
    ports:
      - "8080:8080"
    depends_on:
      - mysql
    command: start-dev
    networks:
      - auth

  mongodb:
    image: mongo:8.0
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db  # Persist MongoDB data
    networks:
      - database

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: always
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_MONGODB_ENABLE_ADMIN: 'true'
    networks:
      - database

  portainer:
    image: docker.io/portainer/portainer-ce
    container_name: portainer
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    restart: always

volumes:
  grafana-data:
  mysql-data:
  mongo-data:
  portainer_data:

networks:
  monitoring:
  backend:
  database:
  auth: